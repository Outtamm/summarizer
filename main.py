import streamlit as st
import requests
import time

st.title("PDF Document Summary")

SUMMARIZATION_ENDPOINT = "http://localhost:8000/summarize"
STATUS_ENDPOINT = "http://localhost:8000/status"

st.markdown("""
## Summary generated with AI
Upload a PDF file and get a summary generated by LaMini-Flan-T5-248M.
""")

uploaded_file = st.file_uploader("Upload PDF file", type=['pdf'])

if uploaded_file is not None:
    st.info(f"File selected: {uploaded_file.name}")
    
    if st.button("Generate summary"):
        try:
            # Display a spinner during upload
            with st.spinner("Uploading file..."):
                files = {"file": (uploaded_file.name, uploaded_file.getvalue(), "application/pdf")}
                response = requests.post(SUMMARIZATION_ENDPOINT, files=files)
            
            if response.status_code == 200:
                task_id = response.json().get("task_id")
                st.success(f"File successfully uploaded. Task ID: {task_id}")
                
                status_container = st.container()
                with status_container:
                    status_placeholder = st.empty()
                    progress_bar = st.progress(0)
                
                # Polling loop
                progress_count = 0
                poll_interval = 1 
                max_duration = 120  
                start_time = time.time()
                
                while True:
                    elapsed_time = time.time() - start_time
                    if elapsed_time > max_duration:
                        status_placeholder.error(f"Timeout after {max_duration} seconds.")
                        break
                    
                    # Update status display
                    status_placeholder.info(f"Processing... ({int(elapsed_time)}s)")
                    
                    # Check task status
                    response = requests.get(f"{STATUS_ENDPOINT}/{task_id}")
                    
                    if response.status_code == 200:
                        result = response.json()
                        
                        if result.get("status") == "completed":
                            progress_bar.progress(100)
                            status_placeholder.success("Summary successfully generated!")
                            summary = result.get("summary")
                            
                            st.subheader("Document Summary")
                            st.text_area("", value=summary, height=300)
                            
                            st.download_button(
                                "Download summary", 
                                data=summary, 
                                file_name="summary.txt", 
                                mime="text/plain"
                            )
                            break
                            
                        elif result.get("status") == "failed":
                            progress_bar.progress(100)
                            error_msg = result.get('error', 'Unknown error')
                            status_placeholder.error(f"Processing error: {error_msg}")
                            break
                    
                    # Update progress bar (max 95% before completion)
                    progress_count = min(95, int((elapsed_time / max_duration) * 100))
                    progress_bar.progress(progress_count)
                    
                    # Wait before next check
                    time.sleep(poll_interval)
                    
            else:
                st.error(f"Error uploading file: {response.status_code}")
                st.error(f"Details: {response.text}")
                
        except Exception as e:
            st.error(f"An error has occurred: {e}")
else:
    st.info("Please upload a PDF file.")

# Display information about the model used
st.sidebar.title("About")
st.sidebar.info("""
This application uses the LaMini-Flan-T5-248M model to generate summaries of PDF documents.
The model is capable of condensing the content of a document while preserving essential information.
""")
